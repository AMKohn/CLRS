<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Introduction to Algorithms</title>
        <description>Solutions to exercise and problems of Introduction to Algorithms by Cormen, Leiserson, Rivest, and Stein</description>
        <link>http://atekihcan.github.io/</link>
        <atom:link href="http://atekihcan.github.io/feed.xml" rel="self" type="application/rss+xml" />
        <pubDate>Wed, 06 May 2015 20:35:21 +0530</pubDate>
        <lastBuildDate>Wed, 06 May 2015 20:35:21 +0530</lastBuildDate>
        <generator>Jekyll v2.4.0</generator>
        
            <item>
                <title>Problem 1-1</title>
                <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Come up with a real-world problem in which only the best solution will do. Then come up with one in which a solution that is “approximately” the best is good enough.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Best sorting algorithm is required when we need to sort a huge amount of data as soon as possible. For example, making a critical decision as soon as possible by analysing medical data of a critical patient.&lt;/p&gt;

&lt;p&gt;“Approximately” best sorting algorithm will work when we need to sort data without any time constraint. For example, analysing data of a medical survey.&lt;/p&gt;
</description>
                <pubDate>Sun, 19 Aug 2012 20:25:00 +0530</pubDate>
                <link>http://atekihcan.github.io/P01-01/</link>
                <guid isPermaLink="true">http://atekihcan.github.io/P01-01/</guid>
                
                
            </item>
        
            <item>
                <title>Exercise 1.1-5</title>
                <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Come up with a real-world problem in which only the best solution will do. Then come up with one in which a solution that is “approximately” the best is good enough.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Best sorting algorithm is required when we need to sort a huge amount of data as soon as possible. For example, making a critical decision as soon as possible by analyzing medical data of a critical patient.&lt;/p&gt;

&lt;p&gt;“Approximately” best sorting algorithm will work when we need to sort data without any time constraint. For example, analyzing data of a medical survey.&lt;/p&gt;
</description>
                <pubDate>Sun, 19 Aug 2012 20:20:00 +0530</pubDate>
                <link>http://atekihcan.github.io/E01.01-05/</link>
                <guid isPermaLink="true">http://atekihcan.github.io/E01.01-05/</guid>
                
                
            </item>
        
            <item>
                <title>Exercise 1.1-4</title>
                <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;How are the shortest-path and travelling-salesman problems given above similar? How are they different?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They are similar in the sense that both traverses a graph and tries to find out the path with minimum sum of the weights.&lt;/p&gt;

&lt;p&gt;They are different because shortest-path problem finds a path &lt;em&gt;between two points&lt;/em&gt; such that sum of the weights is minimized. Whereas, travelling-salesman problem finds the path &lt;em&gt;covering all the points&lt;/em&gt; (start and end point is same) such that sum of the weights is minimized. Also, shortest-path problem is P complex and travelling-salesman is NP-complete.&lt;/p&gt;
</description>
                <pubDate>Sun, 19 Aug 2012 20:15:00 +0530</pubDate>
                <link>http://atekihcan.github.io/E01.01-04/</link>
                <guid isPermaLink="true">http://atekihcan.github.io/E01.01-04/</guid>
                
                
            </item>
        
            <item>
                <title>Exercise 1.1-3</title>
                <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Select a data structure that you have seen previously, and discuss its strengths and limitations.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Strengths of Linked List&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Can be easily resized by adding/removing elements&lt;/li&gt;
  &lt;li&gt;Does not need contiguous memory space&lt;/li&gt;
  &lt;li&gt;New element can be easily inserted in any location&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Limitations of Linked List&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Accessing an element means traversing the list which is &lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt; time complex&lt;/li&gt;
  &lt;li&gt;Additional memory is required for storing the address (pointer) of the next/previous element.&lt;/li&gt;
&lt;/ol&gt;
</description>
                <pubDate>Sun, 19 Aug 2012 20:10:00 +0530</pubDate>
                <link>http://atekihcan.github.io/E01.01-03/</link>
                <guid isPermaLink="true">http://atekihcan.github.io/E01.01-03/</guid>
                
                
            </item>
        
            <item>
                <title>Exercise 1.1-2</title>
                <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Other than speed, what other measures of efficiency might one use in a real-world setting?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Memory usage, number of memory access, network utilization etc.&lt;/p&gt;
</description>
                <pubDate>Sun, 19 Aug 2012 20:05:00 +0530</pubDate>
                <link>http://atekihcan.github.io/E01.01-02/</link>
                <guid isPermaLink="true">http://atekihcan.github.io/E01.01-02/</guid>
                
                
            </item>
        
            <item>
                <title>Exercise 1.1-1</title>
                <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Give a real-world example in which one of the following computational problems appears: sorting, determining the best order for multiplying matrices, or finding the convex hull.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Sorting&lt;/strong&gt; : Sorting listed products in an online marketplace by price or listing blog posts alphabetically&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiplying Matrices&lt;/strong&gt; : Applications which needs frequent matrix multiplications with large data (e.g Image Processing, Machine Learning etc)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finding Convex Hull&lt;/strong&gt; : Finding shortest path between two points with some solid obstacles between them&lt;/p&gt;
</description>
                <pubDate>Sun, 19 Aug 2012 20:00:00 +0530</pubDate>
                <link>http://atekihcan.github.io/E01.01-01/</link>
                <guid isPermaLink="true">http://atekihcan.github.io/E01.01-01/</guid>
                
                
            </item>
        
    </channel>
</rss>